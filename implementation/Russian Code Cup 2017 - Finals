
 /*
 *  Author: sleepify
 */
#include <bits/stdc++.h>
// #include "prettyprint.h"
using namespace std;


#define LOG(x) cerr << "*** " << x << " ***" << endl;
#define wi(x) what_is(x, '\n')
#define wisp(x) what_is(x, ", ")
#define what_is(x, terminator) cerr << #x << " = " << x << terminator;

#define F first
#define S second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define ALL(x) x.begin(), x.end()
#define REV_ALL(x) x.rbegin(), x.rend()
#define SZ(x) (int)x.size()
#define CONTAINS(cont, val) (cont.find(val) != cont.end())
#define endl '\n'
#define IO_SPEED_UP ios::sync_with_stdio(false);cin.tie(NULL)
#define FOR(i, s, e) for(ll i = s; i < e; i++)
#define leftmost_set(x) __builtin_clzll(x)
#define TWO_POWER(n) (1LL << (n))

// When root of a binary tree is 1
#define PARENT(n) ((n) >> 1LL)
#define LCHILD(n) ((n) << 1LL)
#define RCHILD(n) (((n) << 1LL) + 1LL)

typedef long long ll;typedef pair<ll, ll> ii;
typedef vector<ll> vi;typedef vector<bool> vb;
typedef vector<ii> vii;typedef vector<vi> vvi;

const int INF32 = 1E9;
const long long INF64 = 4E18;
const ll M = 1E9 + 7;
const double EPS = 1E-9;
const double PI = 2 * acos(0);

template <typename T> ostream& operator<<(ostream& os, const vector<T> &p){os << "[ "; for (T x: p) os << x << " "; os << "]" << endl; return os;}
template <typename T> ostream& operator<<(ostream& os, const set<T> &p){os << "{ "; for (T x: p) os << x << " "; os << "}" << endl; return os;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const map<Tk, Tv> &p){os << "{ "; for (pair<Tk, Tv> x: p) os << x << " "; os << "}" << endl; return os;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

int main() {
	IO_SPEED_UP; // Turn Off for Interactive Problems
	if(fopen("tupni.txt", "r")) {
		freopen("tupni.txt", "r", stdin);
		freopen("tuptuo.txt", "w", stdout);
	}
	int t; cin >> t;
	while(t--) {
		int n; cin >> n;
		vi a(n);
		for (int i = 0; i < n; ++i) {
			cin >> a[i];
		}
		sort(ALL(a));
		vb avail(1E6 + 1, true);
		set<int> diff;
		for (int i = 0; i < n; ++i) {
			for (int j = i + 1; j < n; ++j) {
				diff.insert(a[j] - a[i]);
			}
		}
		int option = 1;
		vi b(n);
		bool pos = true;
		int N = 1E6;
		for (int i = 0; i < n; ++i) {
			while(avail[option] == false and option <= int(1E6)) option++;
			if(option > N) {
				pos = false;
				break;
			}
			b[i] = option;
			for(int x: diff) {
				if((x + option) > N) break;
				avail[x + option] = false;
			}
			option++;
		}
		if(not pos) {
			cout << "NO" << endl;
		} else {
			cout << "YES" << endl;
			for (int i = 0; i < n; ++i) {
				cout << b[i] << " ";
			}
			cout << endl;
		}
	}
	return 0;
}
